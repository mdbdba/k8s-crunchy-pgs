---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: prometheus-operator
  namespace: flux-system
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
  values:
    fullnameOverride: kps
    labels:
      spog_service_type: observability
      spog_service: prometheus
    annotations:
      obs/monitored: "true"
    resources:
      requests:
        cpu: 15m
        memory: 105M
      limits:
        cpu: 1215m
        memory: 584M

    alertmanager:
      resources:
        requests:
          cpu: 8m
          memory: 53M
        limits:
          cpu: 1771m
          memory: 3796M
    prometheus:
      prometheusSpec:
        enableFeatures:
          - exemplar-storage
        image:
          tag: v2.38.0
        # serviceMonitorSelectorNilUsesHelmValues: true
        serviceMonitorNamespaceSelector:
          matchLabels:
            prometheus.io/monitored: "true"
        serviceMonitorSelector:
          # Impelmenting an opt-out model.
          # i.e. If a ServiceMonitor explicitly adds a label of prometheus.io/monitored: "false"
          # it will not be scraped by the Grafana Agent
          matchExpressions:
            - key: prometheus.io/monitored
              operator: NotIn
              values:
                - "false"
        podMonitorNamespaceSelector:
          matchLabels:
            prometheus.io/monitored: "true"
        podMonitorSelector:
          matchExpressions:
            - key: prometheus.io/monitored
              operator: NotIn
              values:
                - "false"
        probeNamespaceSelector:
          matchLabels:
            prometheus.io/monitored: "true"
        probeSelector:
          matchExpressions:
            - key: prometheus.io/monitored
              operator: NotIn
              values:
                - "false"

    grafana:
      enabled: true
      replicas: 1
      image:
        repository: grafana/grafana
        tag: 9.1.0
      persistence:
        enabled: true
        type: statefulset
        size: 30Gi
        storageClassName: local-path
        accessMode: ["ReadWriteOnce"]
      podLabels:
        app: grafana
        generalized_service_type: observability
        generalized_service: grafana
        release: monitoring-prometheus-operator
      podAnnotations:
        obs/monitored: "true"
      resources:
        requests:
          cpu: 10m
          memory: 78M
        limits:
          cpu: 170m
          memory: 582M
      grafana.ini:
        feature_toggles:
          enable: "tempoSearch tempoBackendSearch"
      serviceMonitor:
        enabled: "true"
        labels: 
          app: grafana
          release: monitoring-prometheus-operator
      datasources:
        datasources.yaml:
          apiVersion: 1
          datasources:
          - name: Prometheus
            type: prometheus
            url: http://kps-prometheus.monitoring:9090/
            access: proxy
          - name: Loki
            type: loki
            access: proxy
            url: http://logging-loki-stack.logging.svc:3100/
          - name: Tempo
            type: tempo
            access: proxy
            url: http://tracing-tempo.tracing.svc:3100/

    additionalPrometheusRulesMap:
      node.rules:
        groups:
          - name: node-exporter.rules
            rules:
              - expr: |
                  count without (cpu, mode) (
                    node_cpu_seconds_total{job="node-exporter",mode="idle"}
                  )
                record: instance:node_num_cpu:sum
              - expr: |
                  1 - avg without (cpu) (
                    sum without (mode) (rate(node_cpu_seconds_total{job="node-exporter", mode=~"idle|iowait|steal"}[5m]))
                  )
                record: instance:node_cpu_utilisation:rate5m
              - expr: |
                  (
                    node_load1{job="node-exporter"}
                  /
                    instance:node_num_cpu:sum{job="node-exporter"}
                  )
                record: instance:node_load1_per_cpu:ratio
              - expr: |
                  1 - (
                    (
                      node_memory_MemAvailable_bytes{job="node-exporter"}
                      or
                      (
                        node_memory_Buffers_bytes{job="node-exporter"}
                        +
                        node_memory_Cached_bytes{job="node-exporter"}
                        +
                        node_memory_MemFree_bytes{job="node-exporter"}
                        +
                        node_memory_Slab_bytes{job="node-exporter"}
                      )
                    )
                  /
                    node_memory_MemTotal_bytes{job="node-exporter"}
                  )
                record: instance:node_memory_utilisation:ratio
              - expr: |
                  rate(node_vmstat_pgmajfault{job="node-exporter"}[5m])
                record: instance:node_vmstat_pgmajfault:rate5m
              - expr: |
                  rate(node_disk_io_time_seconds_total{job="node-exporter", device!=""}[5m])
                record: instance_device:node_disk_io_time_seconds:rate5m
              - expr: |
                  rate(node_disk_io_time_weighted_seconds_total{job="node-exporter", device!=""}[5m])
                record: instance_device:node_disk_io_time_weighted_seconds:rate5m
              - expr: |
                  sum without (device) (
                    rate(node_network_receive_bytes_total{job="node-exporter", device!="lo"}[5m])
                  )
                record: instance:node_network_receive_bytes_excluding_lo:rate5m
              - expr: |
                  sum without (device) (
                    rate(node_network_transmit_bytes_total{job="node-exporter", device!="lo"}[5m])
                  )
                record: instance:node_network_transmit_bytes_excluding_lo:rate5m
              - expr: |
                  sum without (device) (
                    rate(node_network_receive_drop_total{job="node-exporter", device!="lo"}[5m])
                  )
                record: instance:node_network_receive_drop_excluding_lo:rate5m
              - expr: |
                  sum without (device) (
                    rate(node_network_transmit_drop_total{job="node-exporter", device!="lo"}[5m])
                  )
                record: instance:node_network_transmit_drop_excluding_lo:rate5m

  interval: 10m0s
  targetNamespace: monitoring

